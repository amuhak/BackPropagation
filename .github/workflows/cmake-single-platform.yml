# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build_Debug_CPU:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - uses: actions/checkout@v4
    - name: Install Dependencys
      run: |
        sudo apt install cmake pkg-config build-essential libgsl-dev
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build CMakeLists.txt -DCMAKE_BUILD_TYPE=Debug -DGPU=OFF -DTESTING=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --target BackPropagation --config Release
      
    - name : Move and Rename
      run: | 
        mkdir output
        cp ./build/BackPropagation ./output/Debug_CPU_Build_Linux_x64
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C Release
      
    - name: Configure CMake Again
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build CMakeLists.txt -DCMAKE_BUILD_TYPE=Release -DGPU=OFF -DTESTING=ON
    - name: Build Again
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --target BackPropagation --config Release
      
    - name : Move and Rename again
      run: | 
        cp ./build/BackPropagation ./output/Release_CPU_Build_Linux_x64
      
    - name: Test Again
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C Debug

    - name: Make GitHub release  
      run: |
        gh release  --title "Tetsing Builds" --repo ${{ github.repository }} create v0.0.0 --prerelease -F ./Releases.md ./output/Release_CPU_Build_Linux_x64 ./output/Debug_CPU_Build_Linux_x64
        nvcc -V
